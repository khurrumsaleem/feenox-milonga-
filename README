FeenoX: A cloud-first free no-fee no-X uniX-like finite-element(ish) computational engineering tool

-   1 About FeenoX
    -   1.1 Extents
    -   1.2 Capabilities
    -   1.3 Usefulness
-   2 Documentation
-   3 Quickstart
    -   3.1 Download
    -   3.2 Git repository
-   4 Examples
    -   4.1 Tutorials (work in progress)
        -   4.1.1 General tutorials
        -   4.1.2 Detailed functionality
        -   4.1.3 Physics tutorials
    -   4.2 Test suite
-   5 Licensing
    -   5.1 Contributing
-   6 Further information

  [1 About FeenoX]: #about-feenox
  [1.1 Extents]: #extents
  [1.2 Capabilities]: #capabilities
  [1.3 Usefulness]: #usefulness
  [2 Documentation]: #documentation
  [3 Quickstart]: #quickstart
  [3.1 Download]: #download
  [3.2 Git repository]: #git-repository
  [4 Examples]: #examples
  [4.1 Tutorials (work in progress)]: #tutorials-work-in-progress
  [4.1.1 General tutorials]: #general-tutorials
  [4.1.2 Detailed functionality]: #detailed-functionality
  [4.1.3 Physics tutorials]: #physics-tutorials
  [4.2 Test suite]: #test-suite
  [5 Licensing]: #sec:licensing
  [5.1 Contributing]: #sec:contributing
  [6 Further information]: #further-information

About FeenoX

FeenoX is a cloud-first free and open source tool to solve
engineering-related problems using a computer (or many computers in
parallel) with a particular design basis.

Choose your background for further details about the what, how and whys:

-   Industry Engineer
-   Unix Hacker
-   Academic Professor

  [Industry Engineer]: README-engineers.md
  [Unix Hacker]: README-hackers.md
  [Academic Professor]: README-academics.md

Extents

-   See the examples for an overview of the type of problems FeenoX can
    solve:

    1.  Basic mathematics
    2.  Systems of ODEs/DAEs
    3.  Laplace’s equation
    4.  Heat conduction
    5.  Linear elasticity
    6.  Modal analysis
    7.  Neutron diffusion
    8.  Neutron S_(N)

-   Take the tutorials to learn how to solve them yourself.

    1.  Setting up your workspace
    2.  Overview: the tensile test case
    3.  Fun & games: solving mazes with PDES instead of AI
    4.  Heat conduction

-   Review the tests directory in the repository for hundreds of

    -   examples,
    -   unit tests,
    -   regression tests, and/or
    -   (crude) mathematical verification tests.

  [examples]: https://www.seamplex.com/feenox/examples/
  [Basic mathematics]: https://seamplex.com/feenox/examples/basic.html
  [Systems of ODEs/DAEs]: https://seamplex.com/feenox/examples/daes.html
  [Laplace’s equation]: https://seamplex.com/feenox/examples/laplace.html
  [Heat conduction]: https://seamplex.com/feenox/examples/thermal.html
  [Linear elasticity]: https://seamplex.com/feenox/examples/mechanical.html
  [Modal analysis]: https://seamplex.com/feenox/examples/modal.html
  [Neutron diffusion]: https://seamplex.com/feenox/examples/neutron_diffusion.html
  [Neutron S_(N)]: https://seamplex.com/feenox/examples/neutron_sn.html
  [tutorials]: https://www.seamplex.com/feenox/doc/tutorials/
  [Setting up your workspace]: https://www.seamplex.com/feenox/doc/tutorials/000-setup
  [Overview: the tensile test case]: https://www.seamplex.com/feenox/doc/tutorials/110-tensile-test
  [Fun & games: solving mazes with PDES instead of AI]: https://www.seamplex.com/feenox/doc/tutorials/120-mazes
  [1]: https://www.seamplex.com/feenox/doc/tutorials/320-thermal
  [tests]: https://github.com/seamplex/feenox/tree/main/tests

Capabilities

-   Problem defined through a self-descriptive English-like plain-text
    input file
    -   No need to recompile if the problem changes (FeenoX is a program
        not a library)
    -   Simple problems need simple inputs
    -   Similar problems need similar inputs
    -   Everything is an expresion
    -   100%-defined user output (no print or write instructions, no
        output)
-   General mathematical problems using GNU GSL
-   Sets of ODEs/DAEs using SUNDIALS
-   PDEs using FEM
    -   Reads mesh in Gmsh format
    -   Uses PETSc/SLEPc to solve
        -   linear systems (KSP)
        -   non-linear systems (SNES)
        -   time-dependent systems (TS)
        -   generalized eigen-value problems (EPS)
    -   Writes results in either Gmsh or VTK (Paraview) format
-   Cloud-first design (cloud friendliness is not enough)
-   MPI parallelization
-   Unix programming philosophy
    -   rule of separation
    -   rule of silence
    -   rule of economy
-   Space, time and/or solution-dependent material properties and
    boundary conditions
    -   algebraic expressions, and/or
    -   point-wise interpolated data
-   Command-line argument expansion for
    -   increased flexibility,
    -   parametric sweeps, and/or
    -   optimization loops
-   Steady-state, quasi-static and/or transient problems
-   Linear and non-linear problems

Usefulness

-   Web-based thermo-mechanical solver running on the cloud
-   Non-conformal mesh mapping
-   ASME stress linearization for pressurized pipes and vessels
-   Environmentally-assisted fatigue analysis
-   Neutron transport in the cloud
-   Solving a maze without AI
-   Parametric NAFEMS LE10 benchmark: comparison of resource consumption
    for different FEA programs

Documentation

Browse through the documentation index and/or the doc subdirectory of
the Github repository for

-   FAQs, including the what FeenoX means
-   Manual
-   Description
-   Software Design Requirements
-   Software Design Specifications
-   Unix man page (accesible through man feenox after installation)
-   History
-   Compilation guide
-   Programming guide

  [documentation index]: https://seamplex.com/feenox/doc/
  [doc]: https://github.com/seamplex/feenox/tree/main/doc
  [Github repository]: https://github.com/seamplex/feenox/
  [FAQs]: https://seamplex.com/feenox/doc/FAQ.html
  [what FeenoX means]: https://seamplex.com/feenox/doc/FAQ.html#what-does-feenox-mean
  [Manual]: https://www.seamplex.com/feenox/doc/feenox-manual.html
  [Description]: https://www.seamplex.com/feenox/doc/feenox-desc.html
  [Software Design Requirements]: https://seamplex.com/feenox/doc/srs.html
  [Software Design Specifications]: https://seamplex.com/feenox/doc/sds.html
  [Unix man page]: https://www.seamplex.com/feenox/doc/feenox.1.html
  [History]: https://seamplex.com/feenox/doc/history.html
  [Compilation guide]: https://seamplex.com/feenox/doc/compilation.html
  [Programming guide]: https://seamplex.com/feenox/doc/programming.html

Quickstart

Download

FeenoX is distributed under the terms of the GNU General Public License
version 3 or (at your option) any later version.

  ----------------------------- ----------------------------------------------
  Debian/Ubuntu packages        https://www.seamplex.com/feenox/dist/deb
  (unofficial)                  

  GNU/Linux static binaries     https://www.seamplex.com/feenox/dist/linux

  Windows binaries              https://www.seamplex.com/feenox/dist/windows

  Source tarballs               https://www.seamplex.com/feenox/dist/src

  Github repository             https://github.com/seamplex/feenox/
  ----------------------------- ----------------------------------------------

-   FeenoX is cloud first. It was designed to run on servers.

-   Be aware that FeenoX does not have a GUI. Read the documentation,
    especially the description and the FAQs. Ask for help on the GitHub
    discussions page.

-   Debian/Ubuntu packages are unofficial, i.e. they are not available
    in apt repositories. They contain dynamically-linked binaries and
    their dependencies are hard-coded for each Debian/Ubuntu release.
    Make sure you get the right .deb for your release
    (i.e. bookworm/bullseye for Debian, kinetic/focal for Ubuntu).

-   Generic GNU/Linux binaries are provided as statically-linked
    executables for convenience. They do not support MUMPS nor MPI and
    have only basic optimization flags. Please compile from source for
    high-end applications. See detailed compilatation instructions.

-   Try to avoid Windows as much as you can. The binaries are provided
    as transitional packages for people that for some reason still use
    such an outdated, anachronous, awful and invasive operating system.
    They are compiled with Cygwin and have no support whatsoever.
    Really, really, get rid of Windows ASAP.

      “It is really worth any amount of time and effort to get away from
      Windows if you are doing computational science.”

      https://lists.mcs.anl.gov/pipermail/petsc-users/2015-July/026388.html

  [GNU General Public License version 3]: https://www.gnu.org/licenses/gpl-3.0.en.html
  [documentation]: https://seamplex.com/feenox/doc/
  [description]: https://www.seamplex.com/feenox/doc/feenox-desc.html
  [FAQs]: https://seamplex.com/feenox/doc/FAQ.html
  [GitHub discussions page]: https://github.com/seamplex/feenox/discussions
  [detailed compilatation instructions]: https://seamplex.com/feenox/doc/compilation.html
  [Cygwin]: http://cygwin.com/

Git repository

To compile the Git repository, proceed as follows. This procedure does
need git and autoconf but new versions can be pulled and recompiled
easily. If something goes wrong and you get an error, do not hesitate to
ask in FeenoX’s discussion page.

1.  Install mandatory dependencies

        sudo apt-get update
        sudo apt-get install gcc make git automake autoconf libgsl-dev

    If you cannot install libgsl-dev but still have git and the build
    toolchain, you can have the configure script to download and compile
    it for you. See point 4 below.

2.  Install optional dependencies (of course these are optional but
    recommended)

        sudo apt-get install libsundials-dev petsc-dev slepc-dev

3.  Clone Github repository

        git clone https://github.com/seamplex/feenox

4.  Boostrap, configure, compile & make

        cd feenox
        ./autogen.sh
        ./configure
        make -j4

    If you cannot (or do not want to) use libgsl-dev from a package
    repository, call configure with --enable-download-gsl:

        ./configure --enable-download-gsl

    If you do not have Internet access, get the tarball manually, copy
    it to the same directory as configure and run again. See the
    detailed compilation instructions for an explanation.

5.  Run test suite (optional)

        make check

6.  Install the binary system wide (optional)

        sudo make install

To stay up to date, pull and then autogen, configure and make (and
optionally install):

    git pull
    ./autogen.sh; ./configure; make -j4
    sudo make install

See the download page for more detailed information.

  [discussion page]: https://github.com/seamplex/feenox/discussions
  [detailed compilation instructions]: compilation.md
  [download page]: https://seamplex.com/feenox/download.html

Examples

-   The examples page contains dozens of curated and annotated cases.

-   All the files needed to run theses examples are available in the
    examples directory of the Git repository.

-   Each type of partial differential equation (i.e. from Laplace
    downward) is implemented in a subdirectory within src/pde of the
    source tree. See the contributing section below for further
    instructions.

-   Feel free to ask questions in the Github discussion page.

  [examples page]: https://seamplex.com/feenox/examples
  [2]: https://github.com/seamplex/feenox/tree/main/examples
  [Git repository]: https://github.com/seamplex/feenox
  [src/pde]: https://github.com/seamplex/feenox/tree/main/src/pdes
  [contributing]: #sec:contributing
  [Github discussion page]: https://github.com/seamplex/feenox/discussions

Tutorials (work in progress)

All the files needed are available in the examples directory of the Git
repository

1.  Setting up your workspace

  [examples2]: https://github.com/seamplex/feenox/tree/main/examples
  [Git repository]: https://github.com/seamplex/feenox
  [Setting up your workspace]: https://www.seamplex.com/feenox/doc/tutorials/000-setup

General tutorials

1.  Overview: the tensile test case
2.  Fun & games: solving mazes with PDES instead of AI

  [Overview: the tensile test case]: https://www.seamplex.com/feenox/doc/tutorials/110-tensile-test
  [Fun & games: solving mazes with PDES instead of AI]: https://www.seamplex.com/feenox/doc/tutorials/120-mazes

Detailed functionality

1.  Input files, expressions and command-line arguments
2.  Static & transient cases
3.  Functions & functionals
4.  Vectors & matrices
5.  Differential-algebraic equations
6.  Meshes & distributions

Physics tutorials

1.  The Laplace equation
2.  Heat conduction
3.  Linear elasticity
4.  Modal analysis
5.  Thermo-mechanical analysis
6.  Neutron diffusion
7.  Neutron transport

  [Heat conduction1]: https://www.seamplex.com/feenox/doc/tutorials/320-thermal

Test suite

-   The tests directory in the Github repository has hundreds of test
    cases which are used as

    -   examples,
    -   unit tests,
    -   regression tests, and/or
    -   (crude) mathematical verification tests.

-   These tests are run when doing make check after compiling the source
    code.

-   The test cases usually return a single number (which should be near
    zero) comparing the numerical result with the expected one.

-   Feel free to propose benchmark problems to add to the suite in the
    Github discussion page.

-   See tests/mms for verification cases using the Method of
    Manufactured Solutions.

  [directory in the Github repository]: https://github.com/seamplex/feenox/tree/main/tests
  [compiling the source code]: doc/compile.md
  [Github discussion page]: https://github.com/seamplex/feenox/discussions
  [tests/mms]: https://github.com/seamplex/feenox/tree/main/tests/mms

Licensing

FeenoX is distributed under the terms of the GNU General Public License
version 3 or (at your option) any later version. The following text was
borrowed from the Gmsh documentation. Replacing “Gmsh” with “FeenoX”
gives:

  FeenoX is “free software”; this means that everyone is free to use it
  and to redistribute it on a free basis. FeenoX is not in the public
  domain; it is copyrighted and there are restrictions on its
  distribution, but these restrictions are designed to permit everything
  that a good cooperating citizen would want to do. What is not allowed
  is to try to prevent others from further sharing any version of FeenoX
  that they might get from you.

  Specifically, we want to make sure that you have the right to give
  away copies of FeenoX, that you receive source code or else can get it
  if you want it, that you can change FeenoX or use pieces of FeenoX in
  new free programs, and that you know you can do these things.

  To make sure that everyone has such rights, we have to forbid you to
  deprive anyone else of these rights. For example, if you distribute
  copies of FeenoX, you must give the recipients all the rights that you
  have. You must make sure that they, too, receive or can get the source
  code. And you must tell them their rights.

  Also, for our own protection, we must make certain that everyone finds
  out that there is no warranty for FeenoX. If FeenoX is modified by
  someone else and passed on, we want their recipients to know that what
  they have is not what we distributed, so that any problems introduced
  by others will not reflect on our reputation.

  The precise conditions of the license for FeenoX are found in the
  General Public License that accompanies the source code. Further
  information about this license is available from the GNU Project
  webpage http://www.gnu.org/copyleft/gpl-faq.html.

FeenoX is licensed under the terms of the GNU General Public License
version 3 or, at the user convenience, any later version. This means
that users get the four essential freedoms:[1]

0.  The freedom to run the program as they wish, for any purpose.
1.  The freedom to study how the program works, and change it so it does
    their computing as they wish.
2.  The freedom to redistribute copies so they can help others.
3.  The freedom to distribute copies of their modified versions to
    others.

So a free program has to be open source, but it also has to explicitly
provide the four freedoms above both through the written license and
through the mechanisms available to get, modify, compile, run and
document these modifications. That is why licensing FeenoX as GPLv3+
also implies that the source code and all the scripts and makefiles
needed to compile and run it are available for anyone that requires it.
Anyone wanting to modify the program either to fix bugs, improve it or
add new features is free to do so. And if they do not know how to
program, the have the freedom to hire a programmer to do it without
needing to ask permission to the original authors.

Nevertheless, since these original authors are the copyright holders,
they still can use it to either enforce or prevent further actions from
the users that receive FeenoX under the GPLv3+. In particular, the
license allows re-distribution of modified versions only if they are
clearly marked as different from the original and only under the same
terms of the GPLv3+. There are also some other subtle technicalities
that need not be discussed here such as what constitutes a modified
version (which cannot be redistributed under a different license) and
what is an aggregate (in which each part be distributed under different
licenses) and about usage over a network and the possibility of using
AGPL instead of GPL to further enforce freedom (TL;DR: it does not
matter for FeenoX), but which are already taken into account in FeenoX
licensing scheme.

It should be noted that not only is FeenoX free and open source, but
also all of the libraries it depends (and their dependencies) are. It
can also be compiled using free and open source build tool chains
running over free and open source operating systems. In addition, the
FeenoX documentation is licensed under the terms of the GNU Free
Documentation License v1.3 (or any later version).

[1]  There are some examples of pieces of computational software which
are described as “open source” in which even the first of the four
freedoms is denied. The most iconic case is that of Android, whose
sources are readily available online but there is no straightforward way
of updating one’s mobile phone firmware with a customized version, not
to mention vendor and hardware lock ins and the possibility of bricking
devices if something unexpected happens. In the nuclear industry, it is
the case of a Monte Carlo particle-transport program that requests users
to sign an agreement about the objective of its usage before allowing
its execution. The software itself might be open source because the
source code is provided after signing the agreement, but it is not free
(as in freedom) at all.

  [GNU General Public License]: http://www.gnu.org/copyleft/gpl.html
  [Gmsh documentation]: http://gmsh.info/doc/texinfo/gmsh.html#Copying-conditions
  [General Public License]: https://github.com/seamplex/feenox/blob/master/COPYING
  [3]: https://www.gnu.org/licenses/gpl-3.0
  [AGPL]: https://en.wikipedia.org/wiki/GNU_Affero_General_Public_License
  [GNU Free Documentation License v1.3]: https://www.gnu.org/licenses/fdl-1.3.html

Contributing

Contributions from hackers and/or academics are welcome, especially new
types of PDEs and new formulations of existing PDEs. For elliptic
operators feel free to use the Laplace equation at src/pdes/laplace as a
template.

1.  Read programming guide.
2.  Browse Github discussions and open a new thread explaining what you
    want to do and/or asking for help.
3.  Fork the Git repository under your Github account
4.  Create a pull request, including
    -   code,
    -   documentation, and
    -   tests.
5.  Follow up the review procedure.

Note that

-   It is mandatory to observe the Code of Conduct.
-   The contributed code has to be compatible with the GPLv3+ license.
-   Each author keeps the copyright of the contribution.

  [4]: doc/programming.md
  [Github discussions]: https://github.com/seamplex/feenox/discussions
  [5]: https://github.com/seamplex/feenox/
  [Code of Conduct]: CODE_OF_CONDUCT.md
  [GPLv3+ license]: #sec:licensing

Further information

Home page: https://www.seamplex.com/feenox
Repository: https://github.com/seamplex/feenox
Bug reporting: https://github.com/seamplex/feenox/issues
Discussions: https://github.com/seamplex/feenox/discussions
Follow us: YouTube LinkedIn Github

------------------------------------------------------------------------

FeenoX is copyright ©2009-2023 Seamplex
FeenoX is licensed under GNU GPL version 3 or (at your option) any later
version.
FeenoX is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

  [YouTube]: https://www.youtube.com/channel/UCC6SzVLxO8h6j5rLlfCQPhA
  [LinkedIn]: https://www.linkedin.com/company/seamplex/
  [Github]: https://github.com/seamplex
  [Seamplex]: https://www.seamplex.com
  [GNU GPL version 3]: http://www.gnu.org/copyleft/gpl.html
