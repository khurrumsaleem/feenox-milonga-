.\" Automatically generated by Pandoc 2.11.2
.\"
.TH "FEENOX" "1" "2021-03-31" "FeenoX" "FeenoX User Manual"
.hy
.SH NAME
.PP
FeenoX - a free no-fee no-X uniX-like finite-element(ish) computational
engineering tool
.SH SYNOPSIS
.PP
The basic usage is to execute the \f[B]feenox\f[R] binary passing a path
to an input file that defines the problem, along with other options and
command-line replacement arguments which are explained below:
.PP
\f[B]feenox\f[R] [\f[I]options\f[R] \&...] \f[I]input-file\f[R]
[\f[I]optional_commandline_replacement_arguments\f[R] \&...]
.PP
For large problems that do not fit in a single computer, a parallel run
using \f[B]mpirun\f[R]\f[C](1)\f[R] will be needed:
.PP
\f[B]mpirun\f[R] \f[B]-n\f[R] \f[I]number_of_threads\f[R]
\f[B]feenox\f[R] [\f[I]options\f[R] \&...] \f[I]input-file\f[R]
[\f[I]optional_commandline_replacement_arguments\f[R] \&...]
.PP
Besides executing the \f[B]feenox\f[R] binary, there is an API that
allows to use FeenoX from Python or Julia.
.SH DESCRIPTION
.PP
FeenoX is a computational tool that can solve engineering problems which
are usually casted as differential-algebraic equations (DAEs) or partial
differential equations (PDEs).
In particular, it can solve
.IP \[bu] 2
dynamical systems defined by a set of user-provided DAEs (such as plant
control dynamics for example)
.IP \[bu] 2
mechanical elasticity
.IP \[bu] 2
heat conduction
.IP \[bu] 2
structural modal analysis
.IP \[bu] 2
neutron diffusion
.PP
FeenoX reads a plain-text input file which contains the problem
definition and writes 100%-user defined results in ASCII (through
\f[I]PRINT\f[R] or other user-defined output instructions within the
input file).
For PDE problems, it needs a reference to at least one
\f[B]gmsh\f[R]\f[C](1)\f[R] mesh file for the discretization of the
domain.
It can write post-processing views in either \f[I].msh\f[R] or
\f[I].vtk\f[R] formats.
.PP
Keep in mind that FeenoX is just a back end reading a set of input files
and writing a set of output files following the design philosophy of
UNIX (separation, composition, representation, economy, extensibility,
etc).
Think of it as a transfer function between input files and output files:
.IP
.nf
\f[C]
                  +----------------+
                  |                |
input files ----->|     FeenoX     |-----> output files
                  |                |
                  +----------------+ 
\f[R]
.fi
.PP
Following the UNIX programming philosophy, there are no graphical
interfaces attached to the FeenoX core, although a wide variety of pre
and post-processors can be used with FeenoX.
See for example <https://www.caeplex.com> for a web-based interface.
.SH OPTIONS
.TP
\f[B]\f[CB]-h\f[B]\f[R], \f[B]\f[CB]--help\f[B]\f[R]
display usage and commmand-line help and exit
.TP
\f[B]\f[CB]-v\f[B]\f[R], \f[B]\f[CB]--version\f[B]\f[R]
display brief version information and exit
.TP
\f[B]\f[CB]-V\f[B]\f[R], \f[B]\f[CB]--versions\f[B]\f[R]
display detailed version information
.TP
\f[B]\f[CB]-s\f[B]\f[R], \f[B]\f[CB]--sumarize\f[B]\f[R]
list all symbols in the input file and exit
.PP
Instructions will be read from standard input if \[lq]-\[rq] is passed
as inputfile, i.e.
.IP
.nf
\f[C]
$ echo \[dq]PRINT 2+2\[dq] | feenox -
4
\f[R]
.fi
.SH EXAMPLES
.SS The Lorenz system
.SS Tensile test minimum working example
.PP
The following is a MWE input file for FeenoX that reads a Gmsh-generated
\f[I].msh\f[R] file, solves a linear elastic problem and writes the
results in a \f[I].vtk\f[R] file which can be post-processed by
\f[B]paraview\f[R]\f[C](1)\f[R]:
.IP
.nf
\f[C]
\f[R]
.fi
.PP
The \f[I].geo\f[R] file that generates the mesh with Gmsh and the CAD
file in \f[I].step\f[R] format can be found in the \f[I]examples\f[R]
directory.
.SS Extended annotated example
.PP
The example above can be extended to give more information as the
following annotated input shows:
.IP
.nf
\f[C]
\f[R]
.fi
.SH EXIT STATUS
.SH ENVIRONMENT
.SH FILES
.SH CONFORMING TO
.SH INPUT-FILE KEYWORDS
.SS ABORT
.PP
Catastrophically abort the execution and quit FeenoX.
.PP
\f[C]ABORT\f[R]
.PP
Whenever the instruction \f[C]ABORT\f[R] is executed, FeenoX quits with
a non-zero error leve.
It does not close files nor unlock shared memory objects.
The objective of this instruction is to either debug complex input files
by using only parts of them or to conditionally abort the execution
using \f[C]IF\f[R] clauses.
.SS ALIAS
.PP
Define a scalar alias of an already-defined indentifier.
.PP
\f[C]ALIAS { <new_var_name> IS <existing_object> | <existing_object> AS <new_name> }\f[R]
.PP
The existing object can be a variable, a vector element or a matrix
element.
In the first case, the name of the variable should be given as the
existing object.
In the second case, to alias the second element of vector \f[C]v\f[R] to
the new name \f[C]new\f[R], \f[C]v(2)\f[R] should be given as the
existing object.
In the third case, to alias second element (2,3) of matrix \f[C]M\f[R]
to the new name \f[C]new\f[R], \f[C]M(2,3)\f[R] should be given as the
existing object.
.SS BC
.PP
Define a boundary condition to be applied to faces, edges and/or
vertices.
.PP
\f[C]BC <name> [ MESH <name> ] [ PHYSICAL_GROUP <name_1>  [ PHYSICAL_GROUP <name_2> [ ... ] ] ]\f[R]
.PP
If the name of the boundary condition matches a physical group in the
mesh, it is automatically linked to that physical group.
If there are many meshes, the mesh this keyword refers to has to be
given with \f[C]MESH\f[R].
If the boundary condition applies to more than one physical group in the
mesh, they can be added using as many \f[C]PHYSICAL_GROUP\f[R] keywords
as needed.
.SS CLOSE
.PP
Explicitly close a file after input/output.
.PP
\f[C]CLOSE <name>\f[R]
.PP
The given \f[C]<name>\f[R] can be either a fixed-string path or an
already-defined \f[C]FILE\f[R].
.SS DEFAULT_ARGUMENT_VALUE
.PP
Give a default value for an optional commandline argument.
.PP
\f[C]DEFAULT_ARGUMENT_VALUE <constant> <string>\f[R]
.PP
If a \f[C]$n\f[R] construction is found in the input file but the
commandline argument was not given, the default behavior is to fail
complaining that an extra argument has to be given in the commandline.
With this keyword, a default value can be assigned if no argument is
given, thus avoiding the failure and making the argument optional.
The \f[C]<constant>\f[R] should be 1, 2, 3, etc.
and \f[C]<string>\f[R] will be expanded character-by-character where the
\f[C]$n\f[R] construction is.
Whether the resulting expression is to be interpreted as a string or as
a numerical expression will depend on the context.
.SS FILE
.PP
Define a file with a particularly formatted name to be used either as
input or as output.
.PP
\f[C]< FILE | OUTPUT_FILE | INPUT_FILE > <name> PATH <format> expr_1 expr_2 ... expr_n [ INPUT | OUTPUT | MODE <fopen_mode> ]\f[R]
.PP
For reading or writing into files with a fixed path, this instruction is
usually not needed as the \f[C]FILE\f[R] keyword of other instructions
(such as \f[C]PRINT\f[R] or \f[C]MESH\f[R]) can take a fixed-string path
as an argument.
However, if the file name changes as the execution progresses (say
because one file for each step is needed), then an explicit
\f[C]FILE\f[R] needs to be defined with this keyword and later
referenced by the given name.
The path should be given as a \f[C]printf\f[R]-like format string
followed by the expressions which shuold be evaluated in order to obtain
the actual file path.
The expressions will always be floating-point expressions, but the
particular integer specifier \f[C]%d\f[R] is allowed and internally
transformed to \f[C]%.0f\f[R].
The file can be explicitly defined and \f[C]INPUT\f[R], \f[C]OUTPUT\f[R]
or a certain \f[C]fopen()\f[R] mode can be given (i.e.\ \[lq]a\[rq]).
If not explicitly given, the nature of the file will be taken from
context, i.e.\ \f[C]FILE\f[R]s in \f[C]PRINT\f[R] will be
\f[C]OUTPUT\f[R] and \f[C]FILE\f[R]s in \f[C]FUNCTION\f[R] will be
\f[C]INPUT\f[R].
This keyword justs defines the \f[C]FILE\f[R], it does not open it.
The file will be actually openened (and eventually closed)
automatically.
In the rare case where the automated opening and closing does not fit
the expected workflow, the file can be explicitly opened or closed with
the instructions \f[C]FILE_OPEN\f[R] and \f[C]FILE_CLOSE\f[R].
.SS FIT
.PP
Fit a function of one or more arguments to a set of pointwise-defined
data.
.PP
\f[C]FIT <function_to_be_fitted>  TO <function_with_data> VIA <var_1> <var_2> ... <var_n>\[at] [ GRADIENT <expr_1> <expr_2> ... <expr_n> ]\[at] [ RANGE_MIN <expr_1> <expr_2> ... <expr_j> ]\[at] [ RANGE_MAX <expr_1> <expr_2> ... <expr_n> ]\[at] [ DELTAEPSREL <expr> ] [ DELTAEPSABS <expr> ] [ MAX_ITER <expr> ]\[at] [ VERBOSE ] [ RERUN | DO_NOT_RERUN ]\[at]\f[R]
.PP
The function with the data has to be point-wise defined (i.e.\ a
\f[C]FUNCTION\f[R] read from a file with inline \f[C]DATA\f[R]).
The function to be fitted has to be parametrized with at least one of
the variables provided after the \f[C]VIA\f[R] keyword.
Only the names of the functions have to be given, not the arguments.
Both functions have to have the same number of arguments.
The initial guess of the solution is given by the initial value of the
variables listed in the \f[C]VIA\f[R] keyword.
Analytical expressions for the gradient of the function to be fitted
with respect to the parameters to be fitted can be optionally given with
the \f[C]GRADIENT\f[R] keyword.
If none is provided, the gradient will be computed numerically using
finite differences.
A range over which the residuals are to be minimized can be given with
\f[C]RANGE_MIN\f[R] and \f[C]RANGE_MAX\f[R].
The expressions give the range of the arguments of the functions, not of
the parameters.
For multidimensional fits, the range is an hypercube.
If no range is given, all the definition points of the function with the
data are used for the fit.
Convergence can be controlled by giving the relative and absolute
tolreances with \f[C]DELTAEPSREL\f[R] (default
\f[C]DEFAULT_NLIN_FIT_EPSREL\f[R]) and \f[C]DELTAEPSABS\f[R] (default
\f[C]DEFAULT_NLIN_FIT_EPSABS\f[R]), and with the maximum number of
iterations \f[C]MAX_ITER\f[R] (default DEFAULT_NLIN_FIT_MAX_ITER).
If the optional keyword \f[C]VERBOSE\f[R] is given, some data of the
intermediate steps is written in the standard output.
The combination of arguments that minimize the function are computed and
stored in the variables.
So if \f[C]f(x,y)\f[R] is to be minimized, after a \f[C]MINIMIZE f\f[R]
both \f[C]x\f[R] and \f[C]y\f[R] would have the appropriate values.
The details of the method used can be found in GSL\[cq]s
documentation (https://www.gnu.org/software/gsl/doc/html/multimin.html).
Some of them use derivatives and some of them do not.
Default method is \f[C]DEFAULT_MINIMIZER_METHOD\f[R], which does not
need derivatives.
.SS FUNCTION
.PP
Define a function of one or more variables.
.PP
\f[C]FUNCTION <function_name>(<var_1>[,var2,...,var_n]) { [ = <expr> | FILE_PATH <file_path> | ROUTINE <name> | | MESH <name> { DATA <new_vector_name> | VECTOR <existing_vector_name> } { NODES | CELLS } | [ VECTOR_DATA <vector_1> <vector_2> ... <vector_n> <vector_n+1> ] } [COLUMNS <expr_1> <expr_2> ... <expr_n> <expr_n+1> ] [ INTERPOLATION { linear | polynomial | spline | spline_periodic | akima | akima_periodic | steffen | nearest | shepard | shepard_kd | bilinear } ] [ INTERPOLATION_THRESHOLD <expr> ] [ SHEPARD_RADIUS <expr> ] [ SHEPARD_EXPONENT <expr> ] [ SIZES <expr_1> <expr_2> ... <expr_n> ] [ X_INCREASES_FIRST <expr> ] [ DATA <num_1> <num_2> ... <num_N> ]\f[R]
.PP
The number of variables \f[I]n\f[R] is given by the number of arguments
given between parenthesis after the function name.
The arguments are defined as new variables if they had not been already
defined explictly as scalar variables.
If the function is given as an algebraic expression, the short-hand
operator \f[C]:=\f[R] can be used.
That is to say, \f[C]FUNCTION f(x) = x\[ha]2\f[R] is equivalent to
\f[C]f(x) := x\[ha]2\f[R].
If a \f[C]FILE_PATH\f[R] is given, an ASCII file containing at least
\f[I]n\f[R]\[u2005]+\[u2005]1 columns is expected.
By default, the first \f[I]n\f[R] columns are the values of the
arguments and the last column is the value of the function at those
points.
The order of the columns can be changed with the keyword
\f[C]COLUMNS\f[R], which expects \f[I]n\f[R]\[u2005]+\[u2005]1
expressions corresponding to the column numbers.
A function of type \f[C]ROUTINE\f[R] calls an already-defined
user-provided routine using the \f[C]CALL\f[R] keyword and passes the
values of the variables in each required evaluation as a
\f[C]double *\f[R] argument.
If \f[C]MESH\f[R] is given, the definition points are the nodes or the
cells of the mesh.
The function arguments should be (\f[I]x\f[R]),
(\f[I]x\f[R],\[u2006]\f[I]y\f[R]) or
(\f[I]x\f[R],\[u2006]\f[I]y\f[R],\[u2006]\f[I]z\f[R]) matching the
dimension the mesh.
If the keyword \f[C]DATA\f[R] is used, a new empty vector of the
appropriate size is defined.
The elements of this new vector can be assigned to the values of the
function at the \f[I]i\f[R]-th node or cell.
If the keyword \f[C]VECTOR\f[R] is used, the values of the dependent
variable are taken to be the values of the already-existing vector.
Note that this vector should have the size of the number of nodes or
cells the mesh has, depending on whether \f[C]NODES\f[R] or
\f[C]CELLS\f[R] is given.
If \f[C]VECTOR_DATA\f[R] is given, a set of
\f[I]n\f[R]\[u2005]+\[u2005]1 vectors of the same size is expected.
The first \f[I]n\f[R]\[u2005]+\[u2005]1 correspond to the arguments and
the last one is the function value.
Interpolation schemes can be given for either one or multi-dimensional
functions with \f[C]INTERPOLATION\f[R].
Available schemes for \f[I]n\f[R]\[u2004]=\[u2004]1 are:
.IP \[bu] 2
linear
.IP \[bu] 2
polynomial, the grade is equal to the number of data minus one
.IP \[bu] 2
spline, cubic (needs at least 3 points)
.IP \[bu] 2
spline_periodic
.IP \[bu] 2
akima (needs at least 5 points)
.IP \[bu] 2
akima_periodic (needs at least 5 points)
.IP \[bu] 2
steffen, always-monotonic splines-like (available only with GSL >= 2.0)
.PP
Default interpolation scheme for one-dimensional functions is
\f[C]DEFAULT_INTERPOLATION\f[R].
.PP
Available schemes for \f[I]n\f[R]\[u2004]>\[u2004]1 are:
.IP \[bu] 2
nearest, \f[I]f\f[R](\f[I]x\[u20D7]\f[R]) is equal to the value of the
closest definition point
.IP \[bu] 2
shepard, inverse distance weighted average definition
points (https://en.wikipedia.org/wiki/Inverse_distance_weighting) (might
lead to inefficient evaluation)
.IP \[bu] 2
shepard_kd, average of definition points within a
kd-tree (https://en.wikipedia.org/wiki/Inverse_distance_weighting#Modified_Shepard's_method)
(more efficient evaluation provided \f[C]SHEPARD_RADIUS\f[R] is set to a
proper value)
.IP \[bu] 2
bilinear, only available if the definition points configure an
structured hypercube-like grid.
If \f[I]n\f[R]\[u2004]>\[u2004]3, \f[C]SIZES\f[R] should be given.
.PP
For \f[I]n\f[R]\[u2004]>\[u2004]1, if the euclidean distance between the
arguments and the definition points is smaller than
\f[C]INTERPOLATION_THRESHOLD\f[R], the definition point is returned and
no interpolation is performed.
Default value is square root of
\f[C]DEFAULT_MULTIDIM_INTERPOLATION_THRESHOLD\f[R].
The initial radius of points to take into account in
\f[C]shepard_kd\f[R] is given by \f[C]SHEPARD_RADIUS\f[R].
If no points are found, the radius is double until at least one
definition point is found.
The radius is doubled until at least one point is found.
Default is \f[C]DEFAULT_SHEPARD_RADIUS\f[R].
The exponent of the \f[C]shepard\f[R] method is given by
\f[C]SHEPARD_EXPONENT\f[R].
Default is \f[C]DEFAULT_SHEPARD_EXPONENT\f[R].
When requesting \f[C]bilinear\f[R] interpolation for
\f[I]n\f[R]\[u2004]>\[u2004]3, the number of definition points for each
argument variable has to be given with \f[C]SIZES\f[R], and wether the
definition data is sorted with the first argument changing first
(\f[C]X_INCREASES_FIRST\f[R] evaluating to non-zero) or with the last
argument changing first (zero).
The function can be pointwise-defined inline in the input using
\f[C]DATA\f[R].
This should be the last keyword of the line, followed by
\f[I]N\f[R]\[u2004]=\[u2004]\f[I]k\f[R]\[u2005]\[md]\[u2005](\f[I]n\f[R]\[u2005]+\[u2005]1)
expresions giving \f[I]k\f[R] definition points: \f[I]n\f[R] arguments
and the value of the function.
Multiline continuation using brackets \f[C]{\f[R] and \f[C]}\f[R] can be
used for a clean data organization.
See the examples.
.SS HISTORY
.PP
Record the time history of a variable as a function of time.
.PP
\f[C]HISTORY <variable> <function>\f[R]
.SS IF
.PP
Execute a set of instructions if a condition is met.
.PP
\f[C]IF expr \[at]  <block_of_instructions_if_expr_is_true> \[at] [ ELSE  \[at]  <block_of_instructions_if_expr_is_false> ] \[at] ENDIF\f[R]
.SS IMPLICIT
.PP
Define whether implicit definition of variables is allowed or not.
.PP
\f[C]IMPLICIT { NONE | ALLOWED }\f[R]
.PP
By default, FeenoX allows variables (but not vectors nor matrices) to be
implicitly declared.
To avoid introducing errors due to typos, explicit declaration of
variables can be forced by giving \f[C]IMPLICIT NONE\f[R].
Whether implicit declaration is allowed or explicit declaration is
required depends on the last \f[C]IMPLICIT\f[R] keyword given, which by
default is \f[C]ALLOWED\f[R].
.SH SPECIAL VARIABLES
.PP
TBD.
.SH MATERIAL PROPERTIES
.PP
TBD.
.SH BOUNDARY CONDITIONS
.PP
TBD.
.SH RESULTING DISTRIBUTIONS
.PP
TBD.
.SH BUILT-IN FUNCTIONS
.PP
TBD.
.SH BUILT-IN FUNCTIONALS
.PP
TBD.
.SH BUILT-IN VECTOR FUNCTIONS
.PP
TBD.
.SH NOTES
.PP
TBD.
.SH BUGS
.PP
Report on Github or at <jeremy@seamplex.com>
.SH SEE ALSO
.PP
\f[B]gmsh\f[R]\f[C](1)\f[R], \f[B]mpirun\f[R]\f[C](1)\f[R],
\f[B]paraview\f[R]\f[C](1)\f[R]
.PP
The FeenoX web page contains links to the full source code, binary
versions, updates, examples, verification & validation cases and full
documentation: <https://www.seamplex.com/feenox>.
.PP
The FeenoX Case files contains fully-annotated example:
<https://www.seamplex.com/feenox/cases/>
.SH AUTHORS
Jeremy Theler <jeremy@seamplex.com>.
