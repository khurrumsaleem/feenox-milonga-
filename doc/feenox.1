.\" Automatically generated by Pandoc 2.11.2
.\"
.TH "FEENOX" "1" "2021-01-29" "FeenoX" "FeenoX User Manual"
.hy
.SH NAME
.PP
FeenoX - a free no-fee no-X uniX-like finite-element(ish) computational
engineering tool
.SH SYNOPSIS
.PP
The basic usage is to execute the \f[B]feenox\f[R] binary passing a path
to an input file that defines the problem, along with other options and
command-line replacement arguments which are explained below:
.PP
\f[B]feenox\f[R] [\f[I]options\f[R] \&...] \f[I]input-file\f[R]
[\f[I]optional_commandline_replacement_arguments\f[R] \&...]
.PP
For large problems that do not fit in a single computer, a parallel run
using \f[B]mpirun\f[R]\f[C](1)\f[R] will be needed:
.PP
\f[B]mpirun\f[R] \f[B]-n\f[R] \f[I]number_of_threads\f[R]
\f[B]feenox\f[R] [\f[I]options\f[R] \&...] \f[I]input-file\f[R]
[\f[I]optional_commandline_replacement_arguments\f[R] \&...]
.PP
Besides executing the \f[B]feenox\f[R] binary, there is an API that
allows to use FeenoX from Python or Julia.
.SH DESCRIPTION
.PP
FeenoX is a computational tool that can solve engineering problems which
are usually casted as differential-algebraic equations (DAEs) or partial
differential equations (PDEs).
In particular, it can solve
.IP \[bu] 2
dynamical systems defined by a set of user-provided DAEs (such as plant
control dynamics for example)
.IP \[bu] 2
mechanical elasticity
.IP \[bu] 2
heat conduction
.IP \[bu] 2
structural modal analysis
.IP \[bu] 2
neutron diffusion
.PP
FeenoX reads a plain-text input file which contains the problem
definition and writes 100%-user defined results in ASCII (through
\f[I]PRINT\f[R] or other user-defined output instructions within the
input file).
For PDE problems, it needs a reference to at least one
\f[B]gmsh\f[R]\f[C](1)\f[R] mesh file for the discretization of the
domain.
It can write post-processing views in either \f[I].msh\f[R] or
\f[I].vtk\f[R] formats.
.PP
Keep in mind that FeenoX is just a back end reading a set of input files
and writing a set of output files following the design philosophy of
UNIX (separation, composition, representation, economy, extensibility,
etc).
Think of it as a transfer function between input files and output files:
.IP
.nf
\f[C]
                  +----------------+
                  |                |
input files ----->|     FeenoX     |-----> output files
                  |                |
                  +----------------+ 
\f[R]
.fi
.PP
Following the UNIX programming philosophy, there are no graphical
interfaces attached to the FeenoX core, although a wide variety of pre
and post-processors can be used with FeenoX.
See for example <https://www.caeplex.com> for a web-based interface.
.SH OPTIONS
.TP
\f[B]\f[CB]-h\f[B]\f[R], \f[B]\f[CB]--help\f[B]\f[R]
display usage and commmand-line help and exit
.TP
\f[B]\f[CB]-v\f[B]\f[R], \f[B]\f[CB]--version\f[B]\f[R]
display brief version information and exit
.TP
\f[B]\f[CB]-V\f[B]\f[R], \f[B]\f[CB]--versions\f[B]\f[R]
display detailed version information
.TP
\f[B]\f[CB]-d\f[B]\f[R], \f[B]\f[CB]--debug\f[B]\f[R].
start in debug mode
.TP
\f[B]\f[CB]-s\f[B]\f[R], \f[B]\f[CB]--sumarize\f[B]\f[R]
list all symbols in the input file and exit
.PP
Instructions will be read from standard input if \[lq]-\[rq] is passed
as inputfile, i.e.
.IP
.nf
\f[C]
$ echo \[dq]PRINT 2+2\[dq] | feenox -
4
$
\f[R]
.fi
.SH EXAMPLES
.SS The Lorenz system
.SS Tensile test minimum working example
.PP
The following is a MWE input file for FeenoX that reads a Gmsh-generated
\f[I].msh\f[R] file, solves a linear elastic problem and writes the
results in a \f[I].vtk\f[R] file which can be post-processed by
\f[B]paraview\f[R]\f[C](1)\f[R]:
.IP
.nf
\f[C]
\f[R]
.fi
.PP
The \f[I].geo\f[R] file that generates the mesh with Gmsh and the CAD
file in \f[I].step\f[R] format can be found in the \f[I]examples\f[R]
directory.
.SS Extended annotated example
.PP
The example above can be extended to give more information as the
following annotated input shows:
.IP
.nf
\f[C]
\f[R]
.fi
.SH EXIT STATUS
.SH ENVIRONMENT
.SH FILES
.SH CONFORMING TO
.SH REFERENCE
.SS Keywords
.PP
TBD.
.SS Special input distributions
.PP
TBD.
.SS Boundary conditions
.PP
TBD.
.SS Result functions
.PP
TBD.
.SS Special variables
.PP
TBD.
.SH NOTES
.SH BUGS
.SH SEE ALSO
.PP
\f[B]gmsh\f[R]\f[C](1)\f[R], \f[B]mpirun\f[R]\f[C](1)\f[R],
\f[B]paraview\f[R]\f[C](1)\f[R]
.PP
The FeenoX web page contains links to the full source code, binary
versions, updates, examples, verification & validation cases and full
documentation: <https://www.seamplex.com/feenox>.
.PP
The FeenoX Case files contains fully-annotated example:
<https://www.seamplex.com/feenox/cases/>
.SH AUTHORS
Jeremy Theler <jeremy@seamplex.com>.
